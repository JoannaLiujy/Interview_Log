// 实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
// 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
// 必须 原地 修改，只允许使用额外常数空间。
// 输入：nums = [1,2,3]
// 输出：[1,3,2]

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
 function nextPermutation(nums) {
  let i = nums.length - 2;                   // 向左遍历，i从倒数第二开始是为了nums[i+1]要存在
  while (i >= 0 && nums[i] >= nums[i + 1]) { // 寻找第一个小于右邻居的数
      i--;
  }
  if (i >= 0) {                             // 这个数在数组中存在，从它身后挑一个数，和它换
      let j = nums.length - 1;                // 从最后一项，向左遍历
      while (j >= 0 && nums[j] <= nums[i]) {  // 寻找第一个大于 nums[i] 的数
          j--;
      }
      [nums[i], nums[j]] = [nums[j], nums[i]]; // 两数交换，实现变大
  }
  // 如果 i = -1，说明是递减排列，如 3 2 1，没有下一排列，直接翻转为最小排列：1 2 3
  let l = i + 1;           
  let r = nums.length - 1;
  while (l < r) {                            // i 右边的数进行翻转，使得变大的幅度小一些
      [nums[l], nums[r]] = [nums[r], nums[l]];
      l++;
      r--;
  }
}


// 从低位挑一个大一点的数，换掉前面的小一点的一个数，实现变大。
// 变大的幅度要尽量小。
// 像 [3,2,1] 递减的，没有下一个排列，因为大的已经尽量往前排了，没法更大。

// 像 [1,5,2,4,3,2] 这种，我们希望它稍微变大。

// 从低位挑一个大一点的数，换掉前面的小一点的一个数。

// 于是，从右往左，寻找第一个比右邻居小的数。（把它换到后面去）

// 找到 1 5 (2) 4 3 2 中间这个 2，让它和它身后的一个数交换，轻微变大。

// 还是从右往左，寻找第一个比这个 2 微大的数。15 (2) 4 (3) 2，交换，变成 15 (3) 4 (2) 2。

// 这并未结束，变大的幅度可以再小一点，仟位变大了，后三位可以再小一点。

// 后三位是递减的，翻转，变成[1,5,3,2,2,4]，即为所求。

// 作者：xiao_ben_zhu
// 链接：https://leetcode-cn.com/problems/next-permutation/solution/jie-fa-hen-jian-dan-jie-shi-qi-lai-zen-yao-jiu-na-/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
